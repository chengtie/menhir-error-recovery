(** This example parser illustrates how error recovery can be
   programmed using the incremental parsers generated by Menhir.
   There are many ways to recover from parsing errors and they often
   are specific to the grammar we are parsing. Here is our strategy.
   From the grammar, we know that a command is probably ended by a
   semicolon or followed right brace if the semicolon is
   absent. Therefore, if there is a parse error in a command, we can
   skip all the tokens until we consumed the ending semicolon or until
   we are about to consume the right brace. After that we are ready to
   continue parsing, either by closing a block or by moving to another
   command.
   The problem is that we want to continue parsing from a
   syntactically valid state of the parser: a parser which is in the
   middle of a syntactically-ill command is not in such a state. For
   this reason, we maintain the last state of the parser which
   successfully recognized a full command or a full definition: we
   always recover parsing from this state, as if the syntactically
   invalid subsequence of tokens never existed.
   This strategy can be refined to avoid skipping too large part of
   the input.
   Maintaining several coexisting state of the parser is free with the
   incremental mode of Menhir because parsers are purely
   functional. For the lexer generated with ocamllex, it is a bit less
   direct. See {!PureLexer}.
*)

open Parser
open Parser.Incremental
open Parser.MenhirInterpreter
open Lexing
open PureLexer
open ParseError

(**
   [last_reduction] is the last state of the parser which successfully
   [`FoundDefinitionAt] some checkpoint, [`FoundCommandAt] some checkpoint
   or, at the beginning of the input, [`FoundNothingAt] some checkpoint.
   Depending on the context, we decide to skip the tokens which correspond
   to the next (syntactically invalid) command or definition. For this we
   use an heuristic which seems to work in practice:
   - If the previously recognized nonterminal was a command, we skip the
     tokens until we consumed a semicolon or we are just before a right brace.
   - If the previously recognized nonterminal was a definition, we
     skip the tokens until the next DEF or VAR, that is to what is likely
     to start a new definition.
*)
let resume_on_error last_reduction (lex : Lexer.t) currentStateNumber positions env: Lexer.t * AST.expression checkpoint =
  match currentStateNumber with | _ -> ();
  match last_reduction with
  | `FoundCommandAt checkpoint ->
     let lex =
       Lexer.skip_until_before (fun t -> t = SEMICOLON || t = RBRACE) lex
     in
     let lex =
       if Lexer.get' lex = SEMICOLON then snd (Lexer.next lex) else lex
     in
     (lex, checkpoint)
  | (`FoundNothingAt checkpoint | `FoundDefinitionAt checkpoint) ->
     (Lexer.skip_until_before
        (function EOF | DEF | VAR -> true | _ -> false)
        lex,
      checkpoint)
  | `FoundExpressionAt checkpoint ->
     let (startp, endp) = positions in
     (* for extra closing parenthesis: *)
     (* if Lexer.get' lex = RPAREN 
     then (lex, checkpoint)
     else ( *)
     
     (* for '2+', we add '0': *)
     (* let env_new = feed (T T_LINT) startp 0 endp env in
     Printf.printf "BEFORE:\n";
     print_env env;
     Printf.printf "\nAFTER:\n";
     print_env env_new;
     (lex, input_needed env_new) *)

     (* better way, for '(1' or '(1+2' or '(1+2*3' or '((1+2)' we add ')': *)
     let acceptable_me checkpoint token pos =
       let triple = (token, pos, pos) in
       let checkpoint = offer checkpoint triple in
       match shifts checkpoint with
       | None -> (false, None)
       | Some _env -> (true, Some _env)
     in
     match acceptable_me checkpoint (RPAREN) endp with
     | xxx, Some _env ->
       if xxx then Printf.printf "truetruetrue"
       else Printf.printf "falsefalsefalse";
       let env_new = feed (T T_RPAREN) startp () endp _env in
       let _ = env in
       (lex, input_needed env_new)
     | _ -> failwith "hahahaha"

     (* for '(1', we add ')': *)
     (* let env_new = force_reduction (find_production 1) env in
     Printf.printf "BEFORE:\n";
     print_env env;
     Printf.printf "\nAFTER:\n";
     print_env env_new;
     let env_new_new = feed (T T_RPAREN) startp () endp env_new in
     Printf.printf "\nAFTER:AFTER:\n";
     print_env env_new_new;
     (lex, input_needed env_new_new) *)

     (* for '(1+2', we add ')': *)
     (* let env_new = force_reduction (find_production 1) env in
     Printf.printf "BEFORE:\n";
     print_env env;
     Printf.printf "\nAFTER:\n";
     print_env env_new;
     let env_new_new = force_reduction (find_production 3) env_new in
     Printf.printf "\nAFTER:AFTER:\n";
     print_env env_new_new;
     let env_new_new_new = feed (T T_RPAREN) startp () endp env_new_new in
     Printf.printf "\nAFTER:AFTER:AFTER:\n";
     print_env env_new_new_new;
     (lex, input_needed env_new_new_new) *)

      
(** This function updates the last fully correct state of the parser. *)
let update_last_reduction checkpoint production last_reduction =
  match lhs production with
  (* | X (N N_command) ->
     `FoundCommandAt checkpoint
  | X (N N_definition) ->
     `FoundDefinitionAt checkpoint *)
  | X (N N_expression) ->
     (* Printf.printf "update_last_reduction N N_expression\n";
     Printf.printf "%s\n" (Symbol.string_of_production production); *)
     `FoundExpressionAt checkpoint
  | _ ->
     last_reduction

let parse lexbuf =
  Lexer.initialize lexbuf;

  let rec on_error last_reduction (lexer : Lexer.t) (checkpoint : AST.expression checkpoint) =
    contextual_error_msg lexer checkpoint (fun currentStateNumber positions ->
      resume_on_error last_reduction lexer currentStateNumber positions
    )

  (* [run] is the loop function of the parser.
      We maintain [last_reduction] as seen earlier but we also
      save [input_needed] which is the last state of the automaton
      that asked for a token. Since we can change the next token
      observe by this state when we skip tokens, it is the right state from
      which a recovering can be triggered.
      [lexer] and [checkpoint] are the (purely functional) state of
      the lexer and the parser respectively.
   *)
  and run last_reduction (input_needed : AST.expression checkpoint) (lexer : Lexer.t) (checkpoint : AST.expression checkpoint) =
    match checkpoint with
    | InputNeeded _ ->
       Printf.printf "InputNeeded, env always as before\n";
       (* print_env env; *)
       let token, lexer = Lexer.next lexer in
       (* Notice that we update [input_needed] here. *)
       run last_reduction checkpoint lexer (offer checkpoint token)
    | Accepted x ->
       (* We will always return a semantic value. *)
       Printf.printf "AST:\n%s\n" (AST.show_expression x);
       x
    | Rejected
    | HandlingError _ ->
       (* [on_error] is responsible for recovering from the parsing
          error by returning a lexer state and a parser state that can
          work together to complete the analysis if the suffix of the
          input is syntactically correct. *)
       let lexer, after_error = on_error last_reduction lexer input_needed in
       Printf.printf "\nafter_error\n";
       run last_reduction input_needed lexer after_error
    | Shifting (_, _, _) ->
       Printf.printf "\nShifting\n";
       (* Printf.printf "Before:\n";
       print_env env_before;
       Printf.printf "After:\n";
       print_env env_after; *)
       (* Nothing special here, we simply resume parsing. *)
       run last_reduction input_needed lexer (resume checkpoint)
    | AboutToReduce (_, production) ->
      Printf.printf "\nAboutToReduce, env before reduction is always as before\n";
      (* print_env env; *)
       (* At this point, we recall that the prefix of the input has been
           successfully recognized as a nonterminal. *)
       run
         (update_last_reduction input_needed production last_reduction)
         input_needed
         lexer
         (resume checkpoint)
  in
  let checkpoint = expressionEOF lexbuf.lex_curr_p in
  let lexer = Lexer.start in
  run (`FoundNothingAt checkpoint) checkpoint lexer checkpoint

let _main =
  Error.resume_on_error ();
  parse (Lexing.from_channel (open_in Sys.argv.(1)))